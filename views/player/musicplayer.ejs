<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Now Playing - DDMusic</title>
    <link rel="stylesheet" href="/css/output.css">
    <link href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0/css/all.min.css" rel="stylesheet">
</head>

<body class="bg-[#09090b] min-h-screen flex flex-col text-white">
    <!-- Decorative Background -->
    <div class="fixed inset-0 bg-gradient-to-b from-[#2e1065]/10 to-[#0f172a]/10"></div>
    <div class="fixed top-0 left-0 w-1/3 h-screen bg-gradient-to-br from-violet-900/10 via-purple-900/5 to-transparent">
    </div>
    <div class="fixed top-0 right-0 w-1/3 h-screen bg-gradient-to-bl from-indigo-900/10 via-slate-900/5 to-transparent">
    </div>

    <!-- Header -->
    <header class="fixed top-0 w-full bg-black/40 backdrop-blur-xl z-50 px-6 py-4 border-b border-white/5">
        <div class="max-w-7xl mx-auto flex items-center justify-between">
            <div class="flex items-center gap-4">
                <a href="<%= backbutton %>" id="backBtn" class="hover:opacity-75 transition-opacity">
                    <i class="fas fa-chevron-left text-xl"></i>
                </a>
                <h1 class="text-xl font-bold bg-gradient-to-r from-white to-white/60 bg-clip-text text-transparent">Now
                    Playing</h1>
            </div>
            <div class="relative">
                <button id="dropdownButton" class="text-white/60 hover:text-white transition-colors p-2">
                    <i class="fas fa-ellipsis-vertical text-xl"></i>
                </button>
                <div id="dropdownMenu"
                    class="hidden absolute right-0 mt-2 w-64 rounded-lg bg-black/90 backdrop-blur-xl border border-white/10 divide-y divide-gray-800">
                    <!-- Existing Playlists -->
                    <div class="py-1">
                        <% if (typeof playlists !=='undefined' && playlists.length> 0) { %>
                            <% playlists.forEach(playlist=> { %>
                                <form action="/add-to-playlist" method="POST">
                                    <input type="hidden" name="songId" value="<%= songId %>">
                                    <input type="hidden" name="playlistId" value="<%= playlist._id %>">
                                    <button type="submit"
                                        class="w-full px-4 py-3 text-left text-sm flex items-center justify-between text-white/70 hover:text-white hover:bg-white/5">
                                        <div class="flex items-center gap-2">
                                            <i class="fas fa-list text-violet-400"></i>
                                            <span>Add to <%= playlist.name %></span>
                                        </div>
                                        <i class="fas fa-plus text-xs opacity-60"></i>
                                    </button>
                                </form>
                                <% }); %>
                                    <% } else { %>
                                        <p class="px-4 py-3 text-sm text-gray-500">No playlists yet</p>
                                        <% } %>
                    </div>

                    <!-- Create New Playlist Button -->
                    <div class="py-1">
                        <button onclick="showPlaylistDialog()"
                            class="w-full px-4 py-3 text-left text-sm flex items-center gap-2 text-white/70 hover:text-white hover:bg-white/5">
                            <i class="fas fa-plus text-violet-400"></i>
                            <span>Create New Playlist</span>
                        </button>
                    </div>
                </div>
            </div>
        </div>
    </header>

    <!-- Add this dialog before closing body tag -->
    <div id="playlistDialog"
        class="hidden fixed inset-0 bg-black/50 backdrop-blur-sm flex items-center justify-center z-50">
        <div class="bg-black/90 border border-white/10 rounded-lg p-6 max-w-sm w-full mx-4">
            <div class="flex items-center justify-between mb-6">
                <h3 class="text-lg font-semibold">Create New Playlist</h3>
                <button type="button" onclick="hidePlaylistDialog()" class="text-white/40 hover:text-white">
                    <i class="fas fa-times"></i>
                </button>
            </div>
            <form action="/playlist/create" method="POST">
                <input type="hidden" name="songId" value="<%= typeof songId === 'string' ? songId.replace(/^ObjectId\(" (.*)"\)$/, '$1' ) : songId %>">
                <div class="relative">
                    <input type="text" name="name" placeholder="Playlist Name" maxlength="30" class="w-full bg-white/5 border border-white/10 rounded h-12 pl-4 pr-12 text-white 
                                  placeholder:text-white/30 focus:outline-none focus:border-violet-500 text-base"
                        required>
                    <span class="absolute right-4 top-1/2 -translate-y-1/2 text-white/30 text-sm font-mono"></span>
                </div>
                <div class="flex justify-end gap-3 mt-6">
                    <button type="button" onclick="hidePlaylistDialog()"
                        class="px-5 py-2.5 text-sm text-white/70 hover:text-white">
                        Cancel
                    </button>
                    <button type="submit"
                        class="px-8 py-2.5 text-lg py-1 bg-violet-600 hover:bg-violet-500 rounded-full transition-colors">
                        Create
                    </button>
                </div>
            </form>
        </div>
    </div>

    <!-- Main Content -->
    <main class="flex-1 mt-24 mb-8 px-4 relative z-10">
        <div class="max-w-md mx-auto flex flex-col items-center">
            <!-- Album Art Container -->
            <div class="relative group">
                <div
                    class="absolute inset-0 bg-gradient-to-br from-violet-900 to-indigo-950 rounded-3xl blur-2xl opacity-20 group-hover:opacity-30 transition-opacity">
                </div>
                <div class="relative w-72 h-72 md:w-80 md:h-80 rounded-3xl bg-gradient-to-br from-violet-950 to-slate-950 overflow-hidden
                            shadow-[0_8px_32px_12px_rgba(34,211,238,0.25)] hover:shadow-[0_16px_48px_16px_rgba(34,211,238,0.3)]
                            transition-shadow duration-500">
                    <!-- Like Button -->
                    <form action="/like" method="POST" class="absolute top-4 right-4 z-20">
                        <input type="hidden" name="objectId" value="<%= songId %>">
                        <button type="submit"
                            class="w-10 h-10 rounded-full bg-black/20 backdrop-blur-md flex items-center justify-center hover:bg-pink-500/30 transition-all duration-300 group">
                            <i class="fas fa-heart text-white/60 group-hover:text-pink-500"></i>
                        </button>
                    </form>


                    <!-- Cover Art Elements -->
                    <div class="absolute inset-0 flex items-center justify-center">
                        <i class="fas fa-music text-6xl text-white/20 animate-pulse"></i>
                    </div>

                    <!-- Animated Squares -->
                    <div class="absolute inset-0 overflow-hidden opacity-30">
                        <div
                            class="absolute -left-4 -top-4 w-20 h-20 bg-gradient-to-br from-pink-500/40 to-rose-500/30 rounded-lg rotate-12 animate-float 
                                  shadow-[0_0_30px_4px_rgba(236,72,153,0.3)] hover:shadow-[0_0_40px_8px_rgba(236,72,153,0.4)] transition-shadow">
                        </div>

                        <div
                            class="absolute right-10 top-10 w-16 h-16 bg-gradient-to-br from-rose-400/40 to-pink-600/30 rounded-lg -rotate-12 animate-float animation-delay-500
                                  shadow-[0_0_30px_4px_rgba(244,63,94,0.3)] hover:shadow-[0_0_40px_8px_rgba(244,63,94,0.4)] transition-shadow">
                        </div>

                        <div
                            class="absolute bottom-10 left-10 w-14 h-14 bg-gradient-to-br from-fuchsia-500/40 to-pink-500/30 rounded-lg rotate-45 animate-float animation-delay-1000
                                  shadow-[0_0_30px_4px_rgba(217,70,239,0.3)] hover:shadow-[0_0_40px_8px_rgba(217,70,239,0.4)] transition-shadow">
                        </div>

                        <!-- Last square -->
                        <div
                            class="absolute -right-4 -bottom-4 w-24 h-24 bg-gradient-to-br from-pink-600/40 to-rose-400/30 rounded-lg -rotate-12 animate-float animation-delay-1500
                                  shadow-[0_0_30px_4px_rgba(236,72,153,0.3)] hover:shadow-[0_0_40px_8px_rgba(236,72,153,0.4)] transition-shadow">
                        </div>
                    </div>

                    <!-- Loop Control - Repositioned -->
                    <form action="/playerr" method="POST" class="absolute bottom-4 left-4 z-20">
                        <input type="hidden" name="songId" value="<%= songId %>">
                        <input type="hidden" name="songLink" value="<%= songLink %>">
                        <input type="hidden" name="songName" value="<%= songName %>">
                        <input type="hidden" name="loop" value="<%= typeof isLoop !== 'undefined' ? !isLoop : true %>">
                        <button type="submit"
                            class="w-10 h-10 rounded-full bg-black/20 backdrop-blur-md flex items-center justify-center
                                   hover:bg-violet-500/20 transition-all duration-300 group shadow-lg shadow-violet-500/20">
                            <i class="fas fa-repeat text-lg <%= typeof isLoop !== 'undefined' && isLoop ? 'text-violet-400' : 'text-white/60' %> 
                                  group-hover:text-violet-400"></i>
                        </button>
                    </form>
                </div>
            </div>

            <!-- Song Info -->
            <div class="text-center mt-8 mb-6 w-full">
                <h2
                    id="songName"
                    class=" text-2xl font-bold mb-2 bg-gradient-to-r from-violet-200 to-violet-400 bg-clip-text text-transparent">
                    <%=songName%>
                </h2>
                <p class="text-violet-300/30">DDMusic Player</p>
            </div>

            <!-- Audio Controls -->
            <div class="w-full bg-black/40 backdrop-blur-xl p-6 rounded-2xl border border-white/5 shadow-2xl">
                <audio id="audioPlayer" class="hidden" preload="auto" autoplay>
                    <source src="<%= songLink %>" type="audio/mp3" onerror="handleAudioError()" <%=isLoop ? 'loop' : ''
                        %>">
                </audio>

                <!-- Progress Bar -->
                <div class="relative w-full h-1.5 group mb-2 cursor-pointer" id="progressContainer">
                    <div class="absolute inset-0 bg-white/5 rounded-full overflow-hidden">
                        <div class="h-full bg-gradient-to-r from-violet-600 to-indigo-600 w-0 transition-all duration-200"
                            id="progress"></div>
                    </div>
                </div>

                <!-- Time Display -->
                <div class="flex justify-between text-xs text-white/40 mb-6 px-1">
                    <span id="currentTime">0:00</span>
                    <span id="duration">0:00</span>
                </div>

                <!-- Simplified Controls -->
                <div class="flex items-center justify-between px-2 md:px-8 md:justify-center md:gap-8">
                    <a href="/player/previous" class="w-12 h-12 rounded-full flex items-center justify-center
                              text-white/40 hover:text-violet-400 active:scale-95 transition-all">
                        <i class="fas fa-backward-step text-2xl"></i>
                    </a>

                    <button id="playPauseBtn" class="w-16 h-16 rounded-full bg-gradient-to-br from-violet-800 to-indigo-900 
                                   flex items-center justify-center mx-2
                                   hover:scale-105 active:scale-95 transition-all duration-200 
                                   shadow-lg shadow-violet-900/25 border border-white/10">
                        <i class="fas fa-pause text-2xl"></i>
                    </button>

                    <a href="/player/next" class="w-12 h-12 rounded-full flex items-center justify-center
                              text-white/40 hover:text-violet-400 active:scale-95 transition-all">
                        <i class="fas fa-forward-step text-2xl"></i>
                    </a>
                </div>

                <script>
                    const audio = document.getElementById('audioPlayer');
                    const playPauseBtn = document.getElementById('playPauseBtn');
                    const progress = document.getElementById('progress');
                    const progressContainer = document.getElementById('progressContainer');
                    const currentTimeEl = document.getElementById('currentTime');
                    const durationEl = document.getElementById('duration');
                    const playerStatus = document.getElementById('playerStatus');
                    const songNameElement = document.getElementById('songName');
                    let currentSongId = '<%= songId %>';
                    let songQueue = []; // Cache for upcoming songs
                    const backBtn = document.getElementById('backBtn');
                    let wakeLock = null;


async function requestWakeLock() {
  try {
    if ('wakeLock' in navigator) {
      wakeLock = await navigator.wakeLock.request('screen');
      console.log('Wake Lock is active');

      // Optional: handle tab switching
      wakeLock.addEventListener('release', () => {
        console.log('Wake Lock was released');
      });

      // Reacquire on visibility change
      document.addEventListener('visibilitychange', async () => {
        if (wakeLock !== null && document.visibilityState === 'visible') {
          wakeLock = await navigator.wakeLock.request('screen');
          console.log('Wake Lock reacquired');
        }
      });
    } else {
      console.warn('Wake Lock API not supported in this browser');
    }
  } catch (err) {
    console.error(`Wake Lock error: ${err.name}, ${err.message}`);
  }
}

async function preloadSongs(currentId) {
  try {
    const res = await fetch(`/api/next-songs/${currentId}`);
    const data = await res.json();

    if (data.success && data.songs) {
      songQueue = data.songs;
    }
  } catch (err) {
    console.error("Error preloading songs:", err);
  }
}


if (backBtn) {
    backBtn.addEventListener('click', function (e) {
        e.preventDefault(); // Stop default navigation

        try {
        updatePlaybackState(!audio.paused,  '<%= songId %>', audio.currentTime);
        window.location.href ="<%= backbutton %>";
        } catch (error) {
            console.error('Error updating playback state:', error);
        } 
    });
}


                    function updatePlaybackState(isPlaying, songId, currentTime) {
                   fetch('/update-playback-time', {
                   method: 'POST',
                   headers: { 'Content-Type': 'application/json' },
                       body: JSON.stringify({
                      isPlaying : isPlaying,
                      songId: '<%= songId %>',
                      currentTime: audio.currentTime,
                  })
                   }).catch(err => console.error('Error updating playback state:', err));
            }

                    function handleAudioError() {
                        console.error('Audio failed to load:', audio.querySelector('source').src);
                        playerStatus.textContent = 'Error loading audio';
                    }

                    // Initialize audio
                    audio.addEventListener('loadeddata', () => {
                        console.log('Audio loaded successfully');
                        audio.volume = 1.0;
                        playPauseBtn.innerHTML = '<i class="fas fa-pause text-xl"></i>';
                        audio.loop = <%= typeof isLoop !== 'undefined' && isLoop ? 'true' : 'false' %>;
                    });

                    // Format time function
                    function formatTime(seconds) {
                        const min = Math.floor(seconds / 60);
                        const sec = Math.floor(seconds % 60);
                        return `${min}:${sec.toString().padStart(2, '0')}`;
                    }

                    // Update progress and time
                    audio.addEventListener('timeupdate', () => {
                        const percent = (audio.currentTime / audio.duration) * 100;
                        progress.style.width = `${percent}%`;
                        currentTimeEl.textContent = formatTime(audio.currentTime);
                    });

                    // Set duration when metadata is loaded
                    audio.addEventListener('loadedmetadata', () => {
                        durationEl.textContent = formatTime(audio.duration);
                    });

                    // Click to seek
                    progressContainer.addEventListener('click', (e) => {
                        const rect = progressContainer.getBoundingClientRect();
                        const percent = (e.clientX - rect.left) / rect.width;
                        audio.currentTime = percent * audio.duration;
                    });

                    // Simplified play/pause functionality
                    playPauseBtn.addEventListener('click', async () => {
                        try {
                            if (audio.paused) {
                                console.log('Attempting to play audio...');
                                await audio.play();
                                requestWakeLock();
                                playPauseBtn.innerHTML = '<i class="fas fa-pause text-xl"></i>';
                                fetch('/update-playback-time', {
                                    method: 'POST',
                                    headers: { 'Content-Type': 'application/json' },
                                    body: JSON.stringify({
                                        isPlaying: true,
                                        songId: '<%= songId %>',
                                        currentTime: audio.currentTime
                                    })
                                }).catch(err => console.error('Error updating playback time:', err));

                            } else {
                                audio.pause();
                                requestWakeLock();
                                playPauseBtn.innerHTML = '<i class="fas fa-play text-xl pl-1"></i>';
                                fetch('/update-playback-time', {
                                    method: 'POST',
                                    headers: { 'Content-Type': 'application/json' },
                                    body: JSON.stringify({
                                        isPlaying: false,
                                        songId: '<%= songId %>',
                                        currentTime: audio.currentTime
                                    })
                                }).catch(err => console.error('Error updating playback time:', err));
                            }
                        } catch (err) {
                            console.error('Playback error:', err);
                            handleAudioError();
                        }
                    });

                    // Add autoplay functionality
                         audio.addEventListener('ended', async () => {
  if (songQueue.length === 0) {
    // Try fetching more if user is online
    await preloadSongs(currentSongId);
  }

  if (songQueue.length > 0) {
    const nextSong = songQueue.shift();
    audioPlayer.pause();
    audioPlayer.src = nextSong.link;
    audioPlayer.load();
    document.getElementById('songName').textContent = nextSong.name;
    currentSongId = nextSong.id;
    await audioPlayer.play();

    // Optionally preload again if queue is low
    if (songQueue.length < 3) {
      preloadSongs(currentSongId);
    }

  } else {
    console.log("No more songs to play.");
  }
});

                    async function playSong(songId) {
                        try {
                            const response = await fetch('/player', {
                                method: 'POST',
                                headers: {
                                    'Content-Type': 'application/json',
                                    'Accept': 'application/json'
                                },
                                body: JSON.stringify({ objectId: songId })
                            });

                            const data = await response.json();

                            if (data.success) {
                                // Update audio source
                                audio.src = data.song.link;
                                // Update song name
                                document.querySelector('.song-name').textContent = data.song.name;
                                // Update hashtags if they exist
                                if (data.song.hashtags) {
                                    updateHashtags(data.song.hashtags);
                                }
                                // Play the song
                                await audio.play();
                                playPauseBtn.innerHTML = '<i class="fas fa-pause text-xl"></i>';
                                // Update progress
                                progress.style.width = '0%';
                            }
                        } catch (error) {
                            console.error('Error playing song:', error);
                        }
                    }

                    function updateHashtags(hashtags) {
                        const hashtagContainer = document.querySelector('.hashtags');
                        if (hashtagContainer && hashtags) {
                            hashtagContainer.innerHTML = hashtags.map(tag =>
                                `<span class="text-gray-400">${tag}</span>`
                            ).join(' ');
                        }
                    }

                    // Update existing click handlers to use the new playSong function
                    document.querySelectorAll('[data-song-id]').forEach(button => {
                        button.addEventListener('click', (e) => {
                            e.preventDefault();
                            playSong(button.dataset.songId);
                        });
                    });


                    audio.addEventListener('paused', () => {
                        playPauseBtn.innerHTML = '<i class="fas fa-play text-xl pl-1"></i>';
                        updatePlaybackState(false, '<%= songId %>', audio.currentTime);
                    });

                    audio.addEventListener('playing', () => {
                        playPauseBtn.innerHTML = '<i class="fas fa-pause text-xl"></i>';
                        updatePlaybackState(true, '<%= songId %>', audio.currentTime);
                    });

                    async function playNextSong() {
                        try {
                            const currentSongId = '<%= songId %>'; // Get current song ID from EJS
                            const response = await fetch(`/next-song/${currentSongId}`);

                            if (!response.ok) {
                                throw new Error('Network response was not ok');
                            }

                            const data = await response.json();
                            if (data.success && data.song) {
                                // Update the audio source
                                const audioPlayer = document.getElementById('audioPlayer');
                                audioPlayer.src = data.song.link;

                                // Update song information on the page
                                document.getElementById('songName').textContent = data.song.name;

                                // Update the current song ID (if you need it for further operations)
                                document.getElementById('currentSongId').value = data.song.id;

                                // Start playing the new song
                                audioPlayer.play();
                            }
                        } catch (error) {
                            console.error('Error playing next song:', error);
                        }
                    }

                    // Add event listener for song end to auto-play next song
                    document.getElementById('audioPlayer').addEventListener('ended', playNextSong);
                </script>
            </div>
        </div>
        <% if (typeof popupMessage !=='undefined' && popupMessage) { %>
            <div id="playlist-popup" class="w-full flex justify-center mt-6">
                <div
                    class="flex items-center px-4 py-3 rounded-lg shadow-lg border border-gray-700 bg-black/90 backdrop-blur-md whitespace-nowrap min-w-[150px] max-w-[90vw]">
                    <span class="flex items-center justify-center w-7 h-7 rounded-full bg-green-500/20 shadow mr-2">
                        <i class="fas fa-check text-lg text-green-400 drop-shadow"></i>
                    </span>
                    <span
                        class="text-white font-semibold text-base tracking-wide drop-shadow whitespace-nowrap overflow-hidden text-ellipsis">
                        <%= popupMessage %>
                    </span>
                </div>
            </div>
            <style>
                #playlist-popup>div {
                    animation: popup-bounce 0.7s;
                }

                @keyframes popup-bounce {
                    0% {
                        transform: scale(0.7) translateY(-30px);
                        opacity: 0;
                    }

                    60% {
                        transform: scale(1.05) translateY(10px);
                        opacity: 1;
                    }

                    80% {
                        transform: scale(0.96) translateY(-3px);
                    }

                    100% {
                        transform: scale(1) translateY(0);
                        opacity: 1;
                    }
                }
            </style>
            <script>
                setTimeout(() => {
                    const popup = document.getElementById('playlist-popup');
                    if (popup) popup.style.display = 'none';
                }, 2000);
            </script>
            <% } %>
    </main>

    <style>
        @keyframes float {

            0%,
            100% {
                transform: translateY(0) rotate(var(--tw-rotate));
            }

            50% {
                transform: translateY(-10px) rotate(var(--tw-rotate));
            }
        }

        .animate-float {
            animation: float 6s ease-in-out infinite;
        }

        .animation-delay-500 {
            animation-delay: 500ms;
        }

        .animation-delay-1000 {
            animation-delay: 1000ms;
        }

        .animation-delay-1500 {
            animation-delay: 1500ms;
        }
    </style>

    <script>
        const dropdownButton = document.getElementById('dropdownButton');
        const dropdownMenu = document.getElementById('dropdownMenu');

        dropdownButton.addEventListener('click', (e) => {
            e.stopPropagation();
            dropdownMenu.classList.toggle('hidden');
        });

        document.addEventListener('click', (e) => {
            if (!dropdownMenu.contains(e.target)) {
                dropdownMenu.classList.add('hidden');
            }
        });

        function showPlaylistDialog() {
            document.getElementById('playlistDialog').classList.remove('hidden');
            document.getElementById('dropdownMenu').classList.add('hidden');
        }

        function hidePlaylistDialog() {
            document.getElementById('playlistDialog').classList.add('hidden');
        }

        function togglePlaylistModal() {
            const modal = document.getElementById('playlistModal');
            modal.classList.toggle('hidden');
        }
    </script>
</body>

</html>